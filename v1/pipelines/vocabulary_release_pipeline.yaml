# Pipeline to populate vocabulary to an OMOP CDM database.
parameters:
- name: publishPostTFDeploy
  type: boolean
  default: true
  displayName: Run the Post TF Deploy script (One time setup for Vocabulary Load)
- name: publishVocabularyDDL
  type: boolean
  default: true
  displayName: Run the Vocabulary DDL Dacpac (including Vocabulary Load)
- name: publishVocabularyIndexesConstraints
  type: boolean
  default: true
  displayName: Run the Vocabulary Indexes and Constraints Dacpac

  # For artifact retrieval
  # TODO: Add to variable group
- name: sourcePipelineArtifactProjectName
  displayName: Project Name which has the Source Pipeline with the built the pipeline artifacts (e.g. use myproject for https://dev.azure.com/myorg/<myproject>/)
  type: string
  default: $(projectName)
- name: sourcePipelineArtifactPipelineId
  displayName: Pipeline Id which has built the pipeline artifacts (E.g Vocabulary Build).  The variable $(vocabularyBuildPipelineId) is populated through the bootstrap TF project.
  type: string
  default: $(vocabularyBuildPipelineId)

  # Post TF Deploy Parameters
- name: buildArtifactNamePostTFDeploy
  type: string
  default: PostTFDeployScript
  displayName: Build Artifact Name for post TF Script
  values:
  - PostTFDeployScript
- name: scriptFileNamePostTFDeploy
  type: string
  default: Post_TF_Deploy.sql
  displayName: Post TF Deploy Script file name (e.g. Post_TF_Deploy.sql)

  # Vocabulary DDL Parameters
- name: buildArtifactNameVocabularyDDL
  type: string
  default: VocabularyDDLDacpac
  displayName: Build Artifact Name for Vocabulary DDL Dacpac
  values:
  - VocabularyDDLDacpac
- name: dacpacFileNameVocabularyDDL
  type: string
  default: OMOP_Vocabulary_DDL.dacpac
  displayName: OMOP CDM Vocabulary DDL Dacpac file name (e.g. my_omop_vocabulary_ddl.dacpac)

# Vocabulary Indexes and Constraints Parameters
- name: buildArtifactNameVocabularyIndexesConstraints
  type: string
  default: VocabularyIndexesConstraintsDacpac
  displayName: Build Artifact Name for Vocabulary Indexes Constriants Dacpac
  values:
  - VocabularyIndexesConstraintsDacpac
- name: dacpacFileNameVocabularyIndexesConstraints
  type: string
  default: OMOP_Vocabulary_Indexes_Constraints.dacpac
  displayName: OMOP CDM Vocabulary Indexes and Constraints Dacpac file name (e.g. my_omop_vocabulary_indexes_constraints.dacpac)

variables:
  # Variables are included through Variable Groups through bootstrap TF
  - name: adoVMSSAgentPoolName
    value: '$(adoVMSSBuildAgentPoolName)'  # For example, this can be <prefix>-<environment>-ado-build-linux-vmss-agent-pool

  - name: "PublishPostTFDeploy"
    value: ${{ parameters.publishPostTFDeploy }}
  - name: "PublishVocabularyDDL"
    value: ${{ parameters.publishVocabularyDDL }}
  - name: "PublishVocabularyIndexesConstraints"
    value: ${{ parameters.publishVocabularyIndexesConstraints }}

# You can re-enable the build completion trigger by uncommenting this section
# and matching the `source` to the path for your Vocabulary Build Pipeline in the Azure DevOps Pipelines
# e.g. it may be located at `\\OHDSIOnAzure\\some-dev\\Vocabulary\Vocabulary Build Pipeline`
# assuming you set `prefix` to `some` and `environment` to `dev` for your bootstrap Terraform project, for more details see the [readme](/infra/terraform/bootstrap/README.md)
# # build completion trigger
# resources:
#   pipelines:
#   - pipeline: Vocabulary Build Pipeline  # Internal name of the source pipeline, used elsewhere within app-ci YAML
#                             # e.g. to reference published artifacts
#     # You uncomment the line below and replace prefix-environment to match where you have imported your build pipeline
#     source: "\\OHDSIOnAzure\\prefix-environment\\Vocabulary\\Vocabulary Build Pipeline" # Azure Pipelines name of the source pipeline referenced
#     # project: FabrikamProject # Required only if the source pipeline is in another project
#     trigger: true # Run app-ci pipeline when any run of Vocabulary Build completes

# Disable CI Triggers - can re-enable later.
trigger: none

# Release instructions
stages:
# - stage: Check_OMOP_Tests
#   jobs:
#   - job:
#     displayName: Run OMOP Tests
#     continueOnError: 'false'
#     steps:
#       - template: templates/omop_test_suite_pipeline.yaml

# This stage should be run on the initial configuration of the OMOP CDM Database
- stage: Add_Vocab_CDR
  jobs:
  - deployment: Retrieve_Vocab_Files
    displayName: Retrieve_Vocab_Files
    workspace:
      clean: all
    continueOnError: 'false'
    pool: $(adoVMSSAgentPoolName) # Use the VMSS Agent Pool
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#capabilities-and-limitations
    # You can use the default Azure DevOps agent pool provided you have not run into time limits
    # pool:
    #   name: 'Azure Pipelines'

    # Azure DevOps environment should be setup through bootstrap TF and come from your environment-settings-vg
    environment: $(vocabulary_release_environment) # workaround to ensure that you will prompt for the permissions on first time run
    strategy:
      runOnce:
        deploy:
          steps:

          # Run test suite validation
          - template: templates/test_suite/sql_test_suite_pipeline.yaml

          # Install sqlcmd
          - ${{ if eq(variables.PublishPostTFDeploy, 'true') }}:
            - template: templates/install_sqlcmd.yml

          # Install sqlpackage PublishVocabularyDDL
          - ${{ if or(eq(variables.PublishVocabularyDDL, 'true'), eq(variables.PublishVocabularyIndexesConstraints, 'true')) }}:
            - template: templates/install_sqlpackage.yml

          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: '${{ parameters.sourcePipelineArtifactProjectName }}'
              pipeline: '${{ parameters.sourcePipelineArtifactPipelineId }}'
              runVersion: 'latestFromBranch'
              runBranch: $(Build.SourceBranch)
              path: $(Build.SourcesDirectory)/artifacts

          - ${{ if eq(variables.PublishPostTFDeploy, 'true') }}:
            - template: templates/run_sqlcmd_script.yml
              parameters:
                serviceConnection: $(serviceConnection)
                sqlServerName: $(sqlServerName)
                sqlServerDbName: $(sqlServerDbName)
                sourceFolderPath: artifacts/${{ parameters.buildArtifactNamePostTFDeploy }}
                scriptFileName: ${{ parameters.scriptFileNamePostTFDeploy }}
                sqlcmdCommandLineParameters: '-v StorageAccountName="$(storageAccount)" -v BroadseaAppServiceName="$(appSvcName)" -v ADOAgentPoolVMSSName="$(adoAgentPoolVMSSName)"'

          - ${{ if eq(variables.PublishVocabularyDDL, 'true') }}:
            # Run Smoke test for vocabulary files
            - template: templates/smoke_test/smoke_test_vocabulary_files.yaml
              parameters:
                serviceConnection: '$(serviceConnection)'
                vocabulariesContainerPath: '$(vocabulariesContainerPath)'
                storageAccount: '$(storageAccount)'

            - template: templates/run_sqlpackage_script.yml
              parameters:
                serviceConnection: '$(serviceConnection)'
                sqlServerName: '$(sqlServerName)'
                sqlServerDbName: '$(sqlServerDbName)'
                sourceFolderPath: 'artifacts/${{ parameters.buildArtifactNameVocabularyDDL }}'
                scriptFileName: ${{ parameters.dacpacFileNameVocabularyDDL }}
                sqlPackageCommandLineParameters: '/v:VocabulariesContainerPath="$(vocabulariesContainerPath)" /v:DSVocabularyBlobStorageName="$(dSVocabularyBlobStorageName)"'

          - ${{ if eq(variables.PublishVocabularyIndexesConstraints, 'true') }}:
            - template: templates/run_sqlpackage_script.yml
              parameters:
                serviceConnection: '$(serviceConnection)'
                sqlServerName: '$(sqlServerName)'
                sqlServerDbName: '$(sqlServerDbName)'
                sourceFolderPath: 'artifacts/${{ parameters.buildArtifactNameVocabularyIndexesConstraints }}'
                scriptFileName: ${{ parameters.dacpacFileNameVocabularyIndexesConstraints }}
                sqlPackageCommandLineParameters: ''

          - template: templates/cleanup_working_directory.yml
            parameters:
              enableCleanup: '$(enableCleanup)'
