{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.5664",
      "templateHash": "4650273814736824785"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources."
      }
    },
    "suffix": {
      "type": "string",
      "defaultValue": "[uniqueString(utcNow())]"
    },
    "cdmContainerUrl": {
      "type": "string",
      "defaultValue": "https://omoppublic.blob.core.windows.net/shared/synthea1k/",
      "metadata": {
        "description": "The url of the container where the cdm is stored"
      }
    },
    "cdmSasToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The sas token to access the cdm container"
      }
    },
    "postgresOMOPCDMDatabaseName": {
      "type": "string",
      "defaultValue": "synthea1k",
      "metadata": {
        "description": "The name of the database to create for the OMOP CDM"
      }
    },
    "appPlanSkuName": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1",
        "S2",
        "S3",
        "B1",
        "B2",
        "B3",
        "P1V2",
        "P2V2",
        "P3V2",
        "P1V3",
        "P2V3",
        "P3V3"
      ],
      "metadata": {
        "description": "The app service plan sku"
      }
    },
    "postgresSku": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "allowedValues": [
        "Standard_D2s_v3",
        "Standard_D4s_v3",
        "Standard_D8s_v3",
        "Standard_D16s_v3",
        "Standard_D32s_v3",
        "Standard_D48s_v3",
        "Standard_D64s_v3",
        "Standard_D2ds_v4",
        "Standard_D4ds_v4",
        "Standard_D8ds_v4",
        "Standard_D16ds_v4",
        "Standard_D32ds_v4",
        "Standard_D48ds_v4",
        "Standard_D64ds_v4",
        "Standard_D64ds_v4",
        "Standard_B1ms",
        "Standard_B2s",
        "Standard_B2ms",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_B12ms",
        "Standard_B16ms",
        "Standard_B20ms"
      ],
      "metadata": {
        "description": "The postgres sku"
      }
    },
    "postgresStorageSize": {
      "type": "int",
      "defaultValue": 32,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384
      ],
      "metadata": {
        "description": "The size of the postgres database storage"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "defaultValue": "[uniqueString(newGuid())]",
      "metadata": {
        "description": "The password for the postgres admin user"
      }
    },
    "postgresWebapiAdminPassword": {
      "type": "securestring",
      "defaultValue": "[uniqueString(newGuid())]",
      "metadata": {
        "description": "The password for the postgres webapi admin user"
      }
    },
    "postgresWebapiAppPassword": {
      "type": "securestring",
      "defaultValue": "[uniqueString(newGuid())]",
      "metadata": {
        "description": "The password for the postgres webapi app user"
      }
    },
    "postgresOMOPCDMPassword": {
      "type": "securestring",
      "defaultValue": "[uniqueString(newGuid())]",
      "metadata": {
        "description": "The password for the postgres OMOP CDM user"
      }
    },
    "atlasSecurityAdminPassword": {
      "type": "securestring",
      "defaultValue": "[uniqueString(newGuid())]",
      "metadata": {
        "description": "The password for atlas security admin user"
      }
    },
    "atlasUsersList": {
      "type": "securestring",
      "metadata": {
        "description": "Comma-delimited user list for atlas. Do not use admin as a username. It causes problems with Atlas security"
      }
    },
    "localDebug": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enables local access for debugging."
      }
    }
  },
  "variables": {
    "$fxv#0": "create schema IF NOT EXISTS webapi_security;\n\nDROP TABLE IF EXISTS webapi_security.security;\n\nCREATE TABLE webapi_security.security\n(\n    email character varying(255),\n    password character varying(255)\n);\n\nGRANT USAGE ON SCHEMA webapi_security TO PUBLIC;\nGRANT ALL ON SCHEMA webapi_security TO GROUP ohdsi_admin;\n\n\ndo $$\n\n\tdeclare tables_count integer := 0;\n\tdeclare roles_count integer := 0;\n\nbegin\n\t\n\twhile tables_count <> 3 loop\n\t\traise notice 'Waiting for application security tables to become ready...';\n\t \tPERFORM pg_sleep(10);\n\t  \ttables_count := (\n\t\t\tSELECT \tCOUNT(*) \n\t\t\tFROM \tpg_tables\n\t\t\tWHERE \tschemaname = 'webapi'\n\t\t\t\t\tAND tablename  in ('sec_user', 'sec_role', 'sec_user_role')\n\t\t);\n   \tend loop;\n\n\traise notice 'All tables are ready.';\n\n\twhile roles_count <> 3 loop\n\t\traise notice 'Waiting for application security roles to become ready...';\n\t \tPERFORM pg_sleep(10);\n\t  \troles_count := (\n\t\t\tSELECT \tCOUNT(*) \n\t\t\tFROM \twebapi.sec_role\n\t\t\tWHERE \tid in (1, 2, 10)\n\t\t);\n   \tend loop;\n\t\n\traise notice 'All roles are ready.';\n\n   \traise notice 'Done.';\n\nend$$;\n",
    "$fxv#1": "#!/bin/bash\nset -o errexit\nset -o pipefail\nset -o nounset\n\nLOG_FILE=/mnt/azscripts/azscriptoutput/all.log\nexec >  >(tee -ia ${LOG_FILE})\nexec 2> >(tee -ia ${LOG_FILE} >&2)\n\napk --update add postgresql-client apache2-utils\n\npsql -v ON_ERROR_STOP=1 -e \"$OHDSI_ADMIN_CONNECTION_STRING\" -c \"$SQL_ATLAS_CREATE_SECURITY\"\n\ncount=1\nfor i in ${ATLAS_USERS//,/ }\ndo\n    if [ \"$((\"$count\" % 2))\" -eq \"1\" ]; then\n        username=$i\n    else\n        # shellcheck disable=SC2016\n        atlaspw=$(htpasswd -bnBC 4 \"\" \"$i\" | tr -d ':\\n' | sed 's/$2y/$2a/')\n        psql -v ON_ERROR_STOP=1 -e \"$OHDSI_ADMIN_CONNECTION_STRING\" -c \"insert into webapi_security.security (email,password) values ('$username', E'$atlaspw');\"\n        # this step adds some required rows/ids in the db\n        curl \"$WEBAPI_URL/user/login/db\" --data-urlencode \"login=$username\" --data-urlencode \"password=$i\" --fail\n\n        if [ \"$count\" = \"2\" ]; then\n            psql -v ON_ERROR_STOP=1 -e \"$OHDSI_ADMIN_CONNECTION_STRING\" -c \"insert into webapi.sec_user_role (user_id, role_id) values ((select id from webapi.sec_user where login='$username'),2);\" #admin role\n        else\n            psql -v ON_ERROR_STOP=1 -e \"$OHDSI_ADMIN_CONNECTION_STRING\" -c \"insert into webapi.sec_user_role (user_id, role_id) values ((select id from webapi.sec_user where login='$username'),10);\" #atlas user role\n        fi\n    fi\n    ((count++))\ndone\n",
    "$fxv#2": "#!/bin/bash\nset -o errexit\nset -o pipefail\nset -o nounset\n\nfunction build_daimon_object() {\n    local DAIMON_TYPE=$1\n    local VALUE=$2\n    \n    echo '{\n    \"tableQualifier\": \"'\"$VALUE\"'\",\n    \"priority\": 0,\n    \"sourceDaimonId\": null,\n    \"daimonType\": \"'\"$DAIMON_TYPE\"'\"\n    }'\n}\n\n\n# Login\nlogin_response=$(curl \"${OHDSI_WEBAPI_URL}user/login/db\" \\\n    --data-raw \"login=$OHDSI_WEBAPI_USER&password=$OHDSI_WEBAPI_PASSWORD\" \\\n--compressed -i)\n\ntoken=$(echo \"$login_response\" | grep -i bearer: | sed 's/Bearer: //' | tr -d '[:space:]')\n\n\n# Build the request payload\nJSON_PAYLOAD=\"{}\"\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.dialect = $DIALECT' --arg DIALECT \"$DIALECT\")\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.name = $SOURCE_NAME' --arg SOURCE_NAME \"$SOURCE_NAME\")\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.key = $SOURCE_KEY' --arg SOURCE_KEY \"$SOURCE_KEY\")\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.connectionString = $CONNECTION_STRING' --arg CONNECTION_STRING \"$CONNECTION_STRING\")\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.username = $USERNAME' --arg USERNAME \"$USERNAME\")\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.password = $PASSWORD' --arg PASSWORD \"$PASSWORD\")\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.krbAuthMethod = \"password\"')\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.krbAdminServer = null')\nJSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons = []')\n\nif [[ -v DAIMON_CDM ]]; then\n    JSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons += [$DAIMON_CDM]' --argjson DAIMON_CDM \"$(build_daimon_object \"CDM\" \"${DAIMON_CDM}\")\")\nfi\n\nif [[ -v DAIMON_VOCABULARY ]]; then\n    JSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons += [$DAIMON_VOCABULARY]' --argjson DAIMON_VOCABULARY \"$(build_daimon_object \"Vocabulary\" \"${DAIMON_VOCABULARY}\")\")\nfi\n\nif [[ -v DAIMON_RESULTS ]]; then\n    JSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons += [$DAIMON_RESULTS]' --argjson DAIMON_RESULTS \"$(build_daimon_object \"Results\" \"${DAIMON_RESULTS}\")\")\nfi\n\nif [[ -v DAIMON_CEM ]]; then\n    JSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons += [$DAIMON_CEM]' --argjson DAIMON_CEM \"$(build_daimon_object \"CEM\" \"${DAIMON_CEM}\")\")\nfi\n\nif [[ -v DAIMON_CEM_RESULTS ]]; then\n    JSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons += [$DAIMON_CEM_RESULTS]' --argjson DAIMON_CEM_RESULTS \"$(build_daimon_object \"CEMResults\" \"${DAIMON_CEM_RESULTS}\")\")\nfi\n\nif [[ -v DAIMON_TEMP ]]; then\n    JSON_PAYLOAD=$(echo \"$JSON_PAYLOAD\" | jq '.daimons += [$DAIMON_TEMP]' --argjson DAIMON_TEMP \"$(build_daimon_object \"Temp\" \"${DAIMON_TEMP}\")\")\nfi\n\n\n# Add the data source\ncurl -v \"${OHDSI_WEBAPI_URL}source/\" \\\n-H \"Authorization: Bearer ${token}\" \\\n-H 'Content-Type: multipart/form-data; boundary=----WebKitFormBoundary2C72lleJPQ9UH4DL' \\\n--data-raw $'------WebKitFormBoundary2C72lleJPQ9UH4DL\\r\\nContent-Disposition: form-data; name=\"keyfile\"\\r\\n\\r\\nundefined\\r\\n------WebKitFormBoundary2C72lleJPQ9UH4DL\\r\\nContent-Disposition: form-data; name=\"source\"; filename=\"blob\"\\r\\nContent-Type: application/json\\r\\n\\r\\n'\"${JSON_PAYLOAD}\"$'\\r\\n------WebKitFormBoundary2C72lleJPQ9UH4DL--\\r\\n' \\\n--compressed",
    "tenantId": "[subscription().tenantId]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[format('asp-{0}', parameters('suffix'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('appPlanSkuName')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      },
      "metadata": {
        "description": "Creates the app service plan"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[format('kv-{0}', parameters('suffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "accessPolicies": [],
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[variables('tenantId')]",
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      },
      "metadata": {
        "description": "Creates the key vault"
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', format('kv-{0}', parameters('suffix')))]",
      "name": "[format('kv-{0}', parameters('suffix'))]",
      "properties": {
        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]",
        "logs": [
          {
            "category": "AuditEvent",
            "enabled": true,
            "retentionPolicy": {
              "days": 30,
              "enabled": true
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', format('kv-{0}', parameters('suffix')), 'atlas-security-admin-password')]",
      "properties": {
        "value": "[parameters('atlasSecurityAdminPassword')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "deployment-atlas-security",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.42.0",
        "timeout": "PT60M",
        "forceUpdateTag": "5",
        "containerSettings": {
          "containerGroupName": "deployment-atlas-security"
        },
        "retentionInterval": "PT1H",
        "cleanupPreference": "OnExpiration",
        "environmentVariables": [
          {
            "name": "OHDSI_ADMIN_CONNECTION_STRING",
            "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresServerFullyQualifiedDomainName.value, reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebApiDatabaseName.value, reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAdminUsername.value, parameters('postgresWebapiAdminPassword'))]"
          },
          {
            "name": "ATLAS_SECURITY_ADMIN_PASSWORD",
            "secureValue": "[parameters('atlasSecurityAdminPassword')]"
          },
          {
            "name": "ATLAS_USERS",
            "secureValue": "[format('admin,{0},{1}', parameters('atlasSecurityAdminPassword'), parameters('atlasUsersList'))]"
          },
          {
            "name": "SQL_ATLAS_CREATE_SECURITY",
            "value": "[variables('$fxv#0')]"
          },
          {
            "name": "WEBAPI_URL",
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp'), '2022-09-01').outputs.ohdsiWebapiUrl.value]"
          }
        ],
        "scriptContent": "[variables('$fxv#1')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'atlasDatabase')]",
        "[resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp')]"
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[format('log-{0}', parameters('suffix'))]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "deployment-add-data-source",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.42.0",
        "timeout": "PT5M",
        "forceUpdateTag": "5",
        "containerSettings": {
          "containerGroupName": "deployment-add-data-source"
        },
        "retentionInterval": "PT1H",
        "cleanupPreference": "OnExpiration",
        "environmentVariables": [
          {
            "name": "CONNECTION_STRING",
            "secureValue": "[format('jdbc:postgresql://{0}:5432/{1}?user=postgres_admin&password={2}&sslmode=require', reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresServerFullyQualifiedDomainName.value, parameters('postgresOMOPCDMDatabaseName'), parameters('postgresOMOPCDMPassword'))]"
          },
          {
            "name": "OHDSI_WEBAPI_PASSWORD",
            "secureValue": "[parameters('atlasSecurityAdminPassword')]"
          },
          {
            "name": "OHDSI_WEBAPI_USER",
            "value": "admin"
          },
          {
            "name": "OHDSI_WEBAPI_URL",
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp'), '2022-09-01').outputs.ohdsiWebapiUrl.value]"
          },
          {
            "name": "DIALECT",
            "value": "postgresql"
          },
          {
            "name": "SOURCE_NAME",
            "value": "omop-cdm-synthea"
          },
          {
            "name": "SOURCE_KEY",
            "value": "omop-cdm-synthea"
          },
          {
            "name": "USERNAME",
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAdminUsername.value]"
          },
          {
            "name": "PASSWORD",
            "secureValue": "[parameters('postgresWebapiAdminPassword')]"
          },
          {
            "name": "DAIMON_CDM",
            "value": "cdm"
          },
          {
            "name": "DAIMON_VOCABULARY",
            "value": "cdm"
          },
          {
            "name": "DAIMON_RESULTS",
            "value": "cdm_results"
          }
        ],
        "scriptContent": "[variables('$fxv#2')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'atlasDatabase')]",
        "[resourceId('Microsoft.Resources/deploymentScripts', 'deployment-atlas-security')]",
        "[resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp')]",
        "[resourceId('Microsoft.Resources/deployments', 'omopCDM')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "atlasDatabase",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[parameters('suffix')]"
          },
          "keyVaultName": {
            "value": "[format('kv-{0}', parameters('suffix'))]"
          },
          "postgresSku": {
            "value": "[parameters('postgresSku')]"
          },
          "postgresStorageSize": {
            "value": "[parameters('postgresStorageSize')]"
          },
          "postgresAdminPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "postgresWebapiAdminPassword": {
            "value": "[parameters('postgresWebapiAdminPassword')]"
          },
          "postgresWebapiAppPassword": {
            "value": "[parameters('postgresWebapiAppPassword')]"
          },
          "localDebug": {
            "value": "[parameters('localDebug')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.18.4.5664",
              "templateHash": "17994129255750437077"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "postgresSku": {
              "type": "string"
            },
            "postgresStorageSize": {
              "type": "int"
            },
            "postgresAdminPassword": {
              "type": "securestring"
            },
            "postgresWebapiAdminPassword": {
              "type": "securestring"
            },
            "postgresWebapiAppPassword": {
              "type": "securestring"
            },
            "localDebug": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enables local access for debugging."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "CREATE ROLE ${OHDSI_ADMIN_ROLE} CREATEDB REPLICATION VALID UNTIL 'infinity';\n\nCOMMENT ON ROLE ${OHDSI_ADMIN_ROLE} IS 'Administration group for OHDSI applications';\n\nCREATE ROLE ${OHDSI_APP_ROLE} VALID UNTIL 'infinity';\n\nCOMMENT ON ROLE ${OHDSI_APP_ROLE} IS 'Application groupfor OHDSI applications';\n\nCREATE ROLE ${OHDSI_ADMIN_USERNAME} LOGIN ENCRYPTED PASSWORD ${admin_md5} VALID UNTIL 'infinity';\n\nGRANT ${OHDSI_ADMIN_ROLE} TO ${OHDSI_ADMIN_USERNAME};\n\nCOMMENT ON ROLE ${OHDSI_ADMIN_USERNAME} IS 'Admin user account for OHDSI applications';\n\nCREATE ROLE ${OHDSI_APP_USERNAME} LOGIN ENCRYPTED PASSWORD ${app_md5} VALID UNTIL 'infinity';\n\nGRANT ${OHDSI_APP_ROLE} TO ${OHDSI_APP_USERNAME};\n\nCOMMENT ON ROLE ${OHDSI_APP_USERNAME} IS 'Application user account for OHDSI applications';\n\nGRANT ALL ON DATABASE ${DATABASE_NAME} TO GROUP ${OHDSI_ADMIN_ROLE};\n\nGRANT CONNECT, TEMPORARY ON DATABASE ${DATABASE_NAME} TO GROUP ${OHDSI_APP_ROLE};",
            "$fxv#1": "CREATE SCHEMA  IF NOT EXISTS ${SCHEMA_NAME}\nAUTHORIZATION ${OHDSI_ADMIN_ROLE};\n\nCOMMENT ON SCHEMA ${SCHEMA_NAME} IS 'Schema containing tables to support WebAPI functionality';\n\nGRANT USAGE ON SCHEMA ${SCHEMA_NAME} TO PUBLIC;\n\nGRANT ALL ON SCHEMA ${SCHEMA_NAME} TO GROUP ${OHDSI_ADMIN_ROLE};\n\nGRANT USAGE ON SCHEMA ${SCHEMA_NAME} TO GROUP ${OHDSI_APP_ROLE};\n\nALTER DEFAULT PRIVILEGES IN SCHEMA ${SCHEMA_NAME} GRANT\nINSERT,\nSELECT,\nUPDATE,\nDELETE, REFERENCES,\n        TRIGGER ON TABLES TO ${OHDSI_APP_ROLE};\n\nALTER DEFAULT PRIVILEGES IN SCHEMA ${SCHEMA_NAME} GRANT\nSELECT, USAGE ON SEQUENCES TO ${OHDSI_APP_ROLE};\n\nALTER DEFAULT PRIVILEGES IN SCHEMA ${SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${OHDSI_APP_ROLE};\n\nALTER DEFAULT PRIVILEGES IN SCHEMA ${SCHEMA_NAME} GRANT USAGE ON TYPES TO ${OHDSI_APP_ROLE};",
            "$fxv#2": "#!/bin/bash\nset -o errexit\nset -o pipefail\nset -o nounset\n\nLOG_FILE=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/all.log\n\nexec >  >(tee -ia \"${LOG_FILE}\")\nexec 2> >(tee -ia \"${LOG_FILE}\" >&2)\n\napk --update add postgresql-client gettext\nadmin_user_password=\"${OHDSI_ADMIN_PASSWORD}${OHDSI_ADMIN_USERNAME}\"\napp_user_password=\"${OHDSI_APP_PASSWORD}${OHDSI_APP_USERNAME}\"\nadmin_md5=$(echo -n \"$admin_user_password\" | md5sum | awk '{ print $1 }')\nexport admin_md5=\"'md5$admin_md5'\"\n\napp_md5=$(echo -n \"$app_user_password\" | md5sum | awk '{ print $1 }')\nexport app_md5=\"'md5$app_md5'\"\n\nprintf 'Creating roles and users'\necho \"$SQL_ATLAS_USERS\" | envsubst | psql -v ON_ERROR_STOP=0 -e \"$MAIN_CONNECTION_STRING\"\nprintf 'Creating roles and users: done.'\n\nprintf 'Creating schema'\necho \"$SQL_ATLAS_SCHEMA\" | envsubst | psql -v ON_ERROR_STOP=1 -e \"$OHDSI_ADMIN_CONNECTION_STRING\"\nprintf 'Creating schema: done.'\n\nprintf 'Done'\n",
            "postgresAdminUsername": "postgres_admin",
            "postgresWebapiAdminUsername": "ohdsi_admin_user",
            "postgresWebapiAdminRole": "ohdsi_admin",
            "postgresWebapiAppUsername": "ohdsi_app_user",
            "postgresWebapiAppRole": "ohdsi_app",
            "postgresWebApiDatabaseName": "atlas_webapi_db",
            "postgresSchemaName": "webapi",
            "postgresVersion": "14",
            "logCategories": [
              "PostgreSQLLogs"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'postgres-admin-password')]",
              "properties": {
                "value": "[parameters('postgresAdminPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ohdsi-admin-password')]",
              "properties": {
                "value": "[parameters('postgresWebapiAdminPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'ohdsi-app-password')]",
              "properties": {
                "value": "[parameters('postgresWebapiAppPassword')]"
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers",
              "apiVersion": "2022-12-01",
              "name": "[format('psql-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('postgresSku')]",
                "tier": "[if(contains(parameters('postgresSku'), 'B'), 'Burstable', 'GeneralPurpose')]"
              },
              "properties": {
                "version": "[variables('postgresVersion')]",
                "administratorLogin": "[variables('postgresAdminUsername')]",
                "administratorLoginPassword": "[parameters('postgresAdminPassword')]",
                "storage": {
                  "storageSizeGB": "[parameters('postgresStorageSize')]"
                },
                "backup": {
                  "backupRetentionDays": 7,
                  "geoRedundantBackup": "Disabled"
                }
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', format('psql-{0}', parameters('suffix')), 'AllowAllAzureIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "0.0.0.0"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix')))]"
              ]
            },
            {
              "condition": "[parameters('localDebug')]",
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', format('psql-{0}', parameters('suffix')), 'AllowAllIps')]",
              "properties": {
                "startIpAddress": "0.0.0.0",
                "endIpAddress": "255.255.255.255"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', format('psql-{0}', parameters('suffix')), variables('postgresWebApiDatabaseName'))]",
              "properties": {
                "charset": "utf8",
                "collation": "en_US.utf8"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "deployment-ohdsi-webapi-init",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.42.0",
                "timeout": "PT5M",
                "containerSettings": {
                  "containerGroupName": "deployment-ohdsi-webapi-init"
                },
                "environmentVariables": [
                  {
                    "name": "MAIN_CONNECTION_STRING",
                    "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix'))), '2022-12-01').fullyQualifiedDomainName, variables('postgresWebApiDatabaseName'), variables('postgresAdminUsername'), parameters('postgresAdminPassword'))]"
                  },
                  {
                    "name": "OHDSI_ADMIN_CONNECTION_STRING",
                    "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix'))), '2022-12-01').fullyQualifiedDomainName, variables('postgresWebApiDatabaseName'), variables('postgresWebapiAdminUsername'), parameters('postgresWebapiAdminPassword'))]"
                  },
                  {
                    "name": "DATABASE_NAME",
                    "value": "[variables('postgresWebApiDatabaseName')]"
                  },
                  {
                    "name": "SCHEMA_NAME",
                    "value": "[variables('postgresSchemaName')]"
                  },
                  {
                    "name": "OHDSI_ADMIN_PASSWORD",
                    "secureValue": "[parameters('postgresWebapiAdminPassword')]"
                  },
                  {
                    "name": "OHDSI_APP_PASSWORD",
                    "secureValue": "[parameters('postgresWebapiAppPassword')]"
                  },
                  {
                    "name": "OHDSI_APP_USERNAME",
                    "value": "[variables('postgresWebapiAppUsername')]"
                  },
                  {
                    "name": "OHDSI_ADMIN_USERNAME",
                    "value": "[variables('postgresWebapiAdminUsername')]"
                  },
                  {
                    "name": "OHDSI_ADMIN_ROLE",
                    "value": "[variables('postgresWebapiAdminRole')]"
                  },
                  {
                    "name": "OHDSI_APP_ROLE",
                    "value": "[variables('postgresWebapiAppRole')]"
                  },
                  {
                    "name": "SQL_ATLAS_USERS",
                    "value": "[variables('$fxv#0')]"
                  },
                  {
                    "name": "SQL_ATLAS_SCHEMA",
                    "value": "[variables('$fxv#1')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#2')]",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "PT1H"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers/databases', format('psql-{0}', parameters('suffix')), variables('postgresWebApiDatabaseName'))]",
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DBforPostgreSQL/flexibleServers/{0}', format('psql-{0}', parameters('suffix')))]",
              "name": "[format('psql-{0}', parameters('suffix'))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(variables('logCategories'))]",
                    "input": {
                      "category": "[variables('logCategories')[copyIndex('logs')]]",
                      "enabled": true,
                      "retentionPolicy": {
                        "days": 30,
                        "enabled": true
                      }
                    }
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix')))]"
              ]
            }
          ],
          "outputs": {
            "postgresWebapiAdminSecretName": {
              "type": "string",
              "value": "ohdsi-admin-password"
            },
            "postgresWebapiAppSecretName": {
              "type": "string",
              "value": "ohdsi-app-password"
            },
            "postgresServerName": {
              "type": "string",
              "value": "[format('psql-{0}', parameters('suffix'))]"
            },
            "postgresServerFullyQualifiedDomainName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', format('psql-{0}', parameters('suffix'))), '2022-12-01').fullyQualifiedDomainName]"
            },
            "postgresSchemaName": {
              "type": "string",
              "value": "[variables('postgresSchemaName')]"
            },
            "postgresWebapiAdminUsername": {
              "type": "string",
              "value": "[variables('postgresWebapiAdminUsername')]"
            },
            "postgresWebapiAppUsername": {
              "type": "string",
              "value": "[variables('postgresWebapiAppUsername')]"
            },
            "postgresWebApiDatabaseName": {
              "type": "string",
              "value": "[variables('postgresWebApiDatabaseName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]"
      ],
      "metadata": {
        "description": "Creates the database server, users and groups required for ohdsi webapi"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ohdsiWebApiWebapp",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[parameters('suffix')]"
          },
          "appServicePlanId": {
            "value": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}', parameters('suffix')))]"
          },
          "keyVaultName": {
            "value": "[format('kv-{0}', parameters('suffix'))]"
          },
          "jdbcConnectionStringWebapiAdmin": {
            "value": "[format('jdbc:postgresql://{0}:5432/{1}?user={2}&password={3}&sslmode=require', reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresServerFullyQualifiedDomainName.value, reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebApiDatabaseName.value, reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAdminUsername.value, parameters('postgresWebapiAdminPassword'))]"
          },
          "postgresWebapiAdminSecret": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAdminSecretName.value]"
          },
          "postgresWebapiAppSecret": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAppSecretName.value]"
          },
          "postgresWebapiAdminUsername": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAdminUsername.value]"
          },
          "postgresWebapiAppUsername": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebapiAppUsername.value]"
          },
          "postgresWebApiSchemaName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresSchemaName.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.18.4.5664",
              "templateHash": "16381063749948834920"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "postgresWebApiSchemaName": {
              "type": "string"
            },
            "postgresWebapiAppUsername": {
              "type": "string"
            },
            "postgresWebapiAdminUsername": {
              "type": "string"
            },
            "jdbcConnectionStringWebapiAdmin": {
              "type": "securestring"
            },
            "postgresWebapiAppSecret": {
              "type": "securestring"
            },
            "postgresWebapiAdminSecret": {
              "type": "securestring"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "dockerRegistryServer": "https://index.docker.io/v1",
            "dockerImageName": "ohdsi/webapi",
            "dockerImageTag": "2.12.1",
            "flywayBaselineVersion": "2.2.5.20180212152023",
            "tenantId": "[subscription().tenantId]",
            "logCategories": [
              "AppServiceAppLogs",
              "AppServiceConsoleLogs",
              "AppServiceHTTPLogs"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'jdbc-connectionstring')]",
              "properties": {
                "value": "[parameters('jdbcConnectionStringWebapiAdmin')]"
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('id-ohdsiwebapi-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
              "properties": {
                "accessPolicies": [
                  {
                    "objectId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-ohdsiwebapi-{0}', parameters('suffix'))), '2023-01-31').principalId]",
                    "permissions": {
                      "secrets": [
                        "Get",
                        "List"
                      ]
                    },
                    "tenantId": "[variables('tenantId')]"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-ohdsiwebapi-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[format('app-ohdsiwebapi-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "httpsOnly": true,
                "clientAffinityEnabled": false,
                "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-ohdsiwebapi-{0}', parameters('suffix')))]",
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "linuxFxVersion": "[format('DOCKER|{0}:{1}', variables('dockerImageName'), variables('dockerImageTag'))]",
                  "alwaysOn": true,
                  "ftpsState": "Disabled",
                  "appSettings": [
                    {
                      "name": "DOCKER_REGISTRY_SERVER_URL",
                      "value": "[variables('dockerRegistryServer')]"
                    },
                    {
                      "name": "DATASOURCE_DRIVERCLASSNAME",
                      "value": "org.postgresql.Driver"
                    },
                    {
                      "name": "DATASOURCE_OHDSI_SCHEMA",
                      "value": "[parameters('postgresWebApiSchemaName')]"
                    },
                    {
                      "name": "DATASOURCE_USERNAME",
                      "value": "[parameters('postgresWebapiAppUsername')]"
                    },
                    {
                      "name": "DATASOURCE_PASSWORD",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('postgresWebapiAppSecret'))]"
                    },
                    {
                      "name": "DATASOURCE_URL",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'jdbc-connectionstring')]"
                    },
                    {
                      "name": "FLYWAY_BASELINEDESCRIPTION",
                      "value": "Base Migration"
                    },
                    {
                      "name": "FLYWAY_BASELINEONMIGRATE",
                      "value": "true"
                    },
                    {
                      "name": "flyway_baselineVersionAsString",
                      "value": "[variables('flywayBaselineVersion')]"
                    },
                    {
                      "name": "FLYWAY_DATASOURCE_DRIVERCLASSNAME",
                      "value": "org.postgresql.Driver"
                    },
                    {
                      "name": "FLYWAY_DATASOURCE_USERNAME",
                      "value": "[parameters('postgresWebapiAdminUsername')]"
                    },
                    {
                      "name": "FLYWAY_DATASOURCE_PASSWORD",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('postgresWebapiAdminSecret'))]"
                    },
                    {
                      "name": "FLYWAY_DATASOURCE_URL",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'jdbc-connectionstring')]"
                    },
                    {
                      "name": "FLYWAY_LOCATIONS",
                      "value": "classpath:db/migration/postgresql"
                    },
                    {
                      "name": "FLYWAY_PLACEHOLDERS_OHDSISCHEMA",
                      "value": "[parameters('postgresWebApiSchemaName')]"
                    },
                    {
                      "name": "FLYWAY_SCHEMAS",
                      "value": "[parameters('postgresWebApiSchemaName')]"
                    },
                    {
                      "name": "FLYWAY_TABLE",
                      "value": "schema_history"
                    },
                    {
                      "name": "SECURITY_SSL_ENABLED",
                      "value": "false"
                    },
                    {
                      "name": "SECURITY_CORS_ENABLED",
                      "value": "true"
                    },
                    {
                      "name": "SECURITY_DB_DATASOURCE_AUTHENTICATIONQUERY",
                      "value": "select password from webapi_security.security where email = ?"
                    },
                    {
                      "name": "SECURITY_DB_DATASOURCE_PASSWORD",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), parameters('postgresWebapiAdminSecret'))]"
                    },
                    {
                      "name": "SECURITY_DB_DATASOURCE_SCHEMA",
                      "value": "webapi_security"
                    },
                    {
                      "name": "SECURITY_DB_DATASOURCE_URL",
                      "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName={1})', parameters('keyVaultName'), 'jdbc-connectionstring')]"
                    },
                    {
                      "name": "SECURITY_DB_DATASOURCE_USERNAME",
                      "value": "[parameters('postgresWebapiAdminUsername')]"
                    },
                    {
                      "name": "SECURITY_DURATION_INCREMENT",
                      "value": "10"
                    },
                    {
                      "name": "SECURITY_DURATION_INITIAL",
                      "value": "10"
                    },
                    {
                      "name": "SECURITY_MAXLOGINATTEMPTS",
                      "value": "3"
                    },
                    {
                      "name": "SECURITY_ORIGIN",
                      "value": "*"
                    },
                    {
                      "name": "SECURITY_PROVIDER",
                      "value": "AtlasRegularSecurity"
                    },
                    {
                      "name": "SPRING_BATCH_REPOSITORY_TABLEPREFIX",
                      "value": "webapi.BATCH_"
                    },
                    {
                      "name": "SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA",
                      "value": "[parameters('postgresWebApiSchemaName')]"
                    },
                    {
                      "name": "SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT",
                      "value": "org.hibernate.dialect.PostgreSQLDialect"
                    },
                    {
                      "name": "WEBSITE_HEALTHCHECK_MAXPINGFAILURES",
                      "value": "10"
                    },
                    {
                      "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
                      "value": "30"
                    },
                    {
                      "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                      "value": "1800"
                    },
                    {
                      "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                      "value": "false"
                    },
                    {
                      "name": "WEBSITES_PORT",
                      "value": "8080"
                    }
                  ]
                }
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-ohdsiwebapi-{0}', parameters('suffix'))))]": {}
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'jdbc-connectionstring')]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-ohdsiwebapi-{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', format('app-ohdsiwebapi-{0}', parameters('suffix')))]",
              "name": "[format('app-ohdsiwebapi-{0}', parameters('suffix'))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(variables('logCategories'))]",
                    "input": {
                      "category": "[variables('logCategories')[copyIndex('logs')]]",
                      "enabled": true,
                      "retentionPolicy": {
                        "days": 30,
                        "enabled": true
                      }
                    }
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('app-ohdsiwebapi-{0}', parameters('suffix')))]"
              ]
            }
          ],
          "outputs": {
            "ohdsiWebapiUrl": {
              "type": "string",
              "value": "[format('https://{0}/WebAPI/', reference(resourceId('Microsoft.Web/sites', format('app-ohdsiwebapi-{0}', parameters('suffix'))), '2022-03-01').defaultHostName)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'atlasDatabase')]",
        "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]"
      ],
      "metadata": {
        "description": "Creates the ohdsi webapi"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "omopCDM",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "keyVaultName": {
            "value": "[format('kv-{0}', parameters('suffix'))]"
          },
          "cdmContainerUrl": {
            "value": "[parameters('cdmContainerUrl')]"
          },
          "cdmSasToken": {
            "value": "[parameters('cdmSasToken')]"
          },
          "postgresAtlasDatabaseName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresWebApiDatabaseName.value]"
          },
          "postgresOMOPCDMDatabaseName": {
            "value": "[parameters('postgresOMOPCDMDatabaseName')]"
          },
          "postgresAdminPassword": {
            "value": "[parameters('postgresAdminPassword')]"
          },
          "postgresWebapiAdminPassword": {
            "value": "[parameters('postgresWebapiAdminPassword')]"
          },
          "postgresOMOPCDMPassword": {
            "value": "[parameters('postgresOMOPCDMPassword')]"
          },
          "postgresServerName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'atlasDatabase'), '2022-09-01').outputs.postgresServerName.value]"
          },
          "ohdsiWebapiUrl": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp'), '2022-09-01').outputs.ohdsiWebapiUrl.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.18.4.5664",
              "templateHash": "7206575251681119410"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location for all resources."
              }
            },
            "postgresAtlasDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "The name of webapi CDM database"
              }
            },
            "postgresServerName": {
              "type": "string",
              "metadata": {
                "description": "The name of the postgres server"
              }
            },
            "cdmContainerUrl": {
              "type": "string",
              "metadata": {
                "description": "The URL of the container where the CDM data is stored"
              }
            },
            "cdmSasToken": {
              "type": "securestring",
              "metadata": {
                "description": "The SAS token to access the CDM data"
              }
            },
            "postgresOMOPCDMDatabaseName": {
              "type": "string",
              "metadata": {
                "description": "The name of the OMOP CDM database"
              }
            },
            "postgresAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password for the postgres server"
              }
            },
            "postgresWebapiAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Admin password for the webapi database"
              }
            },
            "postgresOMOPCDMPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Password for the cdm user"
              }
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the keyvault"
              }
            },
            "ohdsiWebapiUrl": {
              "type": "string",
              "metadata": {
                "description": "The URL of the OHDSI WebAPI"
              }
            }
          },
          "variables": {
            "$fxv#0": "CREATE ROLE ${POSTGRES_OMOP_CDM_ROLE} VALID UNTIL 'infinity';\nCOMMENT ON ROLE ${POSTGRES_OMOP_CDM_ROLE} IS 'Application group for OHDSI OMOP CDM'; \nCREATE ROLE ${POSTGRES_CDM_USERNAME} LOGIN ENCRYPTED PASSWORD ${CDM_MD5} VALID UNTIL 'infinity'; \nGRANT ${POSTGRES_OMOP_CDM_ROLE} TO ${POSTGRES_CDM_USERNAME};\nCOMMENT ON ROLE ${POSTGRES_CDM_USERNAME} IS 'Application user account for OHDSI OMOP CDM'; \nGRANT CONNECT, TEMPORARY ON DATABASE ${OMOP_CDM_DATABASE_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE};\n\nCREATE SCHEMA IF NOT EXISTS ${POSTGRES_OMOP_CDM_SCHEMA_NAME} AUTHORIZATION ${POSTGRES_ADMIN_USERNAME}; \n\nCOMMENT ON SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} IS 'Schema containing tables of the OMOP CDM'; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} TO PUBLIC; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT SELECT ON TABLES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT SELECT, USAGE ON SEQUENCES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT USAGE ON TYPES TO ${POSTGRES_OMOP_CDM_ROLE};\n\nCREATE SCHEMA IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} AUTHORIZATION ${POSTGRES_ADMIN_USERNAME}; \nCOMMENT ON SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} IS 'Schema containing tables of the OMOP Results'; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} TO PUBLIC; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT INSERT, SELECT, UPDATE, DELETE, REFERENCES, TRIGGER ON TABLES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT SELECT, USAGE ON SEQUENCES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT USAGE ON TYPES TO ${POSTGRES_OMOP_CDM_ROLE};\n\nCREATE SCHEMA IF NOT EXISTS ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} AUTHORIZATION ${POSTGRES_ADMIN_USERNAME}; \nCOMMENT ON SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} IS 'Schema containing tables of the OMOP Temporary'; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} TO PUBLIC; \nGRANT ALL ON SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT INSERT, SELECT, UPDATE, DELETE, REFERENCES, TRIGGER ON TABLES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT SELECT, USAGE ON SEQUENCES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT USAGE ON TYPES TO ${POSTGRES_OMOP_CDM_ROLE};\n",
            "$fxv#1": "CREATE TABLE IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_analysis\n(\n    analysis_id integer,\n    analysis_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_1_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_2_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_3_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_4_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_5_name character varying(255) COLLATE pg_catalog.\"default\",\n    is_default integer,\n    category character varying(255) COLLATE pg_catalog.\"default\"\n)\nWITH (\n    OIDS = FALSE\n)\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_analysis\n    OWNER to ${POSTGRES_ADMIN_USERNAME};\n\n\nCREATE TABLE IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results\n(\n    analysis_id integer,\n    stratum_1 character varying COLLATE pg_catalog.\"default\",\n    stratum_2 character varying COLLATE pg_catalog.\"default\",\n    stratum_3 character varying COLLATE pg_catalog.\"default\",\n    stratum_4 character varying COLLATE pg_catalog.\"default\",\n    stratum_5 character varying COLLATE pg_catalog.\"default\",\n    count_value bigint\n)\nWITH (\n    OIDS = FALSE\n)\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results\n    OWNER to ${POSTGRES_ADMIN_USERNAME};\n-- Index: idx_ar_aid\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_aid;\n\nCREATE INDEX IF NOT EXISTS idx_ar_aid\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (analysis_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_aid_s1\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_aid_s1;\n\nCREATE INDEX IF NOT EXISTS idx_ar_aid_s1\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (analysis_id ASC NULLS LAST, stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_aid_s1234\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_aid_s1234;\n\nCREATE INDEX IF NOT EXISTS idx_ar_aid_s1234\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (analysis_id ASC NULLS LAST, stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST, stratum_2 COLLATE pg_catalog.\"default\" ASC NULLS LAST, stratum_3 COLLATE pg_catalog.\"default\" ASC NULLS LAST, stratum_4 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_s1\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_s1;\n\nCREATE INDEX IF NOT EXISTS idx_ar_s1\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_s2\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_s2;\n\nCREATE INDEX IF NOT EXISTS idx_ar_s2\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (stratum_2 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n\n\n-- Table: ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist\n\n-- DROP TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist;\n\nCREATE TABLE IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist\n(\n    analysis_id integer,\n    stratum_1 character varying COLLATE pg_catalog.\"default\",\n    stratum_2 character varying COLLATE pg_catalog.\"default\",\n    stratum_3 character varying COLLATE pg_catalog.\"default\",\n    stratum_4 character varying COLLATE pg_catalog.\"default\",\n    stratum_5 character varying COLLATE pg_catalog.\"default\",\n    count_value bigint,\n    min_value numeric,\n    max_value numeric,\n    avg_value numeric,\n    stdev_value numeric,\n    median_value numeric,\n    p10_value numeric,\n    p25_value numeric,\n    p75_value numeric,\n    p90_value numeric\n)\nWITH (\n    OIDS = FALSE\n)\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist\n    OWNER to ${POSTGRES_ADMIN_USERNAME};\n-- Index: idx_ard_aid\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ard_aid;\n\nCREATE INDEX IF NOT EXISTS idx_ard_aid\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist USING btree\n    (analysis_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ard_s1\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ard_s1;\n\nCREATE INDEX IF NOT EXISTS idx_ard_s1\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist USING btree\n    (stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ard_s2\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ard_s2;\n\nCREATE INDEX IF NOT EXISTS idx_ard_s2\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist USING btree\n    (stratum_2 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;",
            "$fxv#2": "#!/bin/bash\nset -o errexit\nset -o pipefail\nset -o nounset\n\nLOG_FILE=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/all.log\n\nexec >  >(tee -ia \"${LOG_FILE}\")\nexec 2> >(tee -ia \"${LOG_FILE}\" >&2)\n\n# install postgresql client\necho 'installing psql...'\napk --update add postgresql-client gettext\n\n# create OMOP CDM schema and user\npg_cdm_password=\"${POSTGRES_OMOP_CDM_PASSWORD}${POSTGRES_CDM_USERNAME}\"\nCDM_MD5=$(echo -n \"$pg_cdm_password\" | md5sum | awk '{ print $1 }')\nexport CDM_MD5=\"'md5$CDM_MD5'\"\n\nprintf 'Creating omp cdm schemas and user\\n'\n# shellcheck disable=SC2154\necho \"$SQL_create_omop_schemas\" | envsubst | psql \"$OMOP_CONNECTION_STRING\" -e\n\n# create OMOP CDM (+ Vocabulary) tables\nprintf 'Creating OMOP CDM tables\\n'\nsed -i  s/@cdmDatabaseSchema/\"${POSTGRES_OMOP_CDM_SCHEMA_NAME}\"/g OMOPCDM_postgresql_5.4_ddl.sql OMOPCDM_postgresql_5.4_constraints.sql OMOPCDM_postgresql_5.4_primary_keys.sql OMOPCDM_postgresql_5.4_indices.sql\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOPCDM_postgresql_5.4_ddl.sql -v ON_ERROR_STOP=1\n\n# create and load OMOP Results (Achilles) tables\nprintf 'Creating OMOP Results tables\\n'\n# shellcheck disable=SC2154\necho \"$SQL_create_achilles_schema\" | envsubst | psql \"$OMOP_CONNECTION_STRING\" -e -v ON_ERROR_STOP=1\n\n# skip foreign key constraints for now due to open bug - https://github.com/OHDSI/CommonDataModel/issues/452\n# psql \"$OMOP_CONNECTION_STRING\" -f OMOPCDM_postgresql_5.4_constraints.sql\n# create OMOP CDM primary keys\nprintf 'Creating OMOP CDM primary keys\\n'\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOPCDM_postgresql_5.4_primary_keys.sql -v ON_ERROR_STOP=1\n# load OMOP CDM data\ntables=(\"cdm.concept_ancestor\" \"cdm.concept_relationship\" \"cdm.concept\" \"cdm.drug_strength\" \"cdm.concept_synonym\" \"cdm.measurement\" \"cdm.observation\" \"cdm.cost\" \"cdm.visit_detail\" \"cdm.visit_occurrence\" \"cdm.payer_plan_period\" \"cdm.drug_exposure\" \"cdm.procedure_occurrence\" \"cdm.condition_occurrence\" \"cdm.condition_era\" \"cdm.provider\" \"cdm.drug_era\" \"cdm.person\" \"cdm.relationship\" \"cdm.observation_period\" \"cdm.concept_class\" \"cdm.device_exposure\" \"cdm.death\" \"cdm.cdm_source\" \"cdm.vocabulary\" \"cdm.domain\" \"cdm_results.achilles_analysis\" \"cdm_results.achilles_results_dist\" \"cdm_results.achilles_results\")\nprintf 'Loading OMOP CDM data\\n'\nn=${#tables[@]}\ni=0\nfor element in \"${tables[@]}\"; do\n    ((i++)) || true\n    printf \"Downloading and extracting: %s (%s)\\n\" \"$element.csv.gz\" \"$i/$n\"\n    file=/tmp/\"$element\".csv\n    curl \"${OMOP_CDM_CONTAINER_URL}$element.csv.gz${OMOP_CDM_SAS_TOKEN}\" | gunzip > \"$file\"\n    num_of_records=$(wc -l \"$file\" | awk '{print $1}')\n    printf \"Copying %s records to table: %s\\n\" \"$num_of_records\" \"$element\"\n    psql \"$OMOP_CONNECTION_STRING\" -c \"\\COPY $element FROM '$file' WITH CSV;\" -v ON_ERROR_STOP=1\n    rm -f \"$file\"\n    printf \"done\\n\"\ndone\n\n# create OMOP CDM indices\nprintf 'creating OMOP CDM indices\\n'\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOPCDM_postgresql_5.4_indices.sql -v ON_ERROR_STOP=1\n\n# Generate results DDL\nwget -O OMOP_RESULTS_DDL.sql \"${OHDSI_WEBAPI_URL}ddl/results?dialect=postgresql&schema=$POSTGRES_OMOP_RESULTS_SCHEMA_NAME&vocabSchema=$POSTGRES_OMOP_CDM_SCHEMA_NAME&tempSchema=$POSTGRES_OMOP_TEMP_SCHEMA_NAME&initConceptHierarchy=true\"\n\n# Execute results DDL\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOP_RESULTS_DDL.sql -v ON_ERROR_STOP=1\n\n# for now user will need to add a source via Atlas UI, there's work in progress to automate this\nprintf 'OMOP CDM created, you can now add it to Atlas as a source, connection string will avaiable in Azure KeyVault.\\n'\n",
            "postgresOMOPCDMSchemaName": "cdm",
            "postgresOMOPResultsSchemaName": "cdm_results",
            "postgresOMOPTempSchemaName": "temp",
            "postgresOMOPCDMRole": "cdm_reader",
            "postgresOMOPCDMUsername": "cdm_user",
            "postgresOMOPCDMUserSecretName": "[format('{0}-cdm-user-password', parameters('postgresOMOPCDMDatabaseName'))]",
            "postgresOMOPCDMJDBCConnectionStringSecretName": "[format('{0}-cdm-jdbc-connection-string', parameters('postgresOMOPCDMDatabaseName'))]",
            "postgresWebAPISchemaName": "webapi",
            "postgresWebapiAdminUsername": "ohdsi_admin_user",
            "postgresAdminUsername": "postgres_admin"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('postgresOMOPCDMUserSecretName'))]",
              "properties": {
                "value": "[parameters('postgresOMOPCDMPassword')]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('postgresOMOPCDMJDBCConnectionStringSecretName'))]",
              "properties": {
                "value": "[format('jdbc:postgresql://{0}:5432/{1}?user={2}&password={3}&sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresOMOPCDMDatabaseName'), variables('postgresOMOPCDMUsername'), parameters('postgresOMOPCDMPassword'))]"
              }
            },
            {
              "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
              "apiVersion": "2022-12-01",
              "name": "[format('{0}/{1}', parameters('postgresServerName'), parameters('postgresOMOPCDMDatabaseName'))]",
              "properties": {
                "charset": "utf8",
                "collation": "en_US.utf8"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "deployment-omop-cdm",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.42.0",
                "timeout": "PT60M",
                "forceUpdateTag": "1",
                "environmentVariables": [
                  {
                    "name": "WEBAPI_SCHEMA_NAME",
                    "value": "[variables('postgresWebAPISchemaName')]"
                  },
                  {
                    "name": "ATLAS_DB_CONNECTION_STRING",
                    "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresAtlasDatabaseName'), variables('postgresWebapiAdminUsername'), parameters('postgresWebapiAdminPassword'))]"
                  },
                  {
                    "name": "OMOP_CONNECTION_STRING",
                    "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresOMOPCDMDatabaseName'), variables('postgresAdminUsername'), parameters('postgresAdminPassword'))]"
                  },
                  {
                    "name": "OMOP_JDBC_CONNECTION_STRING",
                    "secureValue": "[format('jdbc:postgresql://{0}:5432/{1}?user={2}&password={3}&sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresOMOPCDMDatabaseName'), variables('postgresOMOPCDMUsername'), parameters('postgresOMOPCDMPassword'))]"
                  },
                  {
                    "name": "OMOP_CDM_DATABASE_NAME",
                    "value": "[parameters('postgresOMOPCDMDatabaseName')]"
                  },
                  {
                    "name": "OMOP_CDM_CONTAINER_URL",
                    "value": "[parameters('cdmContainerUrl')]"
                  },
                  {
                    "name": "POSTGRES_ADMIN_USERNAME",
                    "value": "[variables('postgresAdminUsername')]"
                  },
                  {
                    "name": "POSTGRES_CDM_USERNAME",
                    "value": "[variables('postgresOMOPCDMUsername')]"
                  },
                  {
                    "name": "POSTGRES_OMOP_CDM_ROLE",
                    "value": "[variables('postgresOMOPCDMRole')]"
                  },
                  {
                    "name": "POSTGRES_OMOP_CDM_PASSWORD",
                    "secureValue": "[parameters('postgresOMOPCDMPassword')]"
                  },
                  {
                    "name": "OMOP_CDM_SAS_TOKEN",
                    "value": "[parameters('cdmSasToken')]"
                  },
                  {
                    "name": "POSTGRES_OMOP_CDM_SCHEMA_NAME",
                    "value": "[variables('postgresOMOPCDMSchemaName')]"
                  },
                  {
                    "name": "POSTGRES_OMOP_RESULTS_SCHEMA_NAME",
                    "value": "[variables('postgresOMOPResultsSchemaName')]"
                  },
                  {
                    "name": "POSTGRES_OMOP_TEMP_SCHEMA_NAME",
                    "value": "[variables('postgresOMOPTempSchemaName')]"
                  },
                  {
                    "name": "SQL_create_omop_schemas",
                    "value": "[variables('$fxv#0')]"
                  },
                  {
                    "name": "SQL_create_achilles_schema",
                    "value": "[variables('$fxv#1')]"
                  }
                ],
                "scriptContent": "[variables('$fxv#2')]",
                "supportingScriptUris": [
                  "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_ddl.sql",
                  "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_constraints.sql",
                  "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_primary_keys.sql",
                  "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_indices.sql"
                ],
                "cleanupPreference": "OnExpiration",
                "retentionInterval": "PT1H",
                "containerSettings": {
                  "containerGroupName": "deployment-omop-cdm"
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'atlasDatabase')]",
        "[resourceId('Microsoft.KeyVault/vaults', format('kv-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp')]"
      ],
      "metadata": {
        "description": "Creates OMOP CDM database"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "atlasUI",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "suffix": {
            "value": "[parameters('suffix')]"
          },
          "appServicePlanId": {
            "value": "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}', parameters('suffix')))]"
          },
          "ohdsiWebApiUrl": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp'), '2022-09-01').outputs.ohdsiWebapiUrl.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.18.4.5664",
              "templateHash": "15901564848532204157"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "suffix": {
              "type": "string"
            },
            "appServicePlanId": {
              "type": "string"
            },
            "ohdsiWebApiUrl": {
              "type": "string"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "$fxv#0": "define([], function () {\n  var configLocal = {};\n\n  // clearing local storage otherwise source cache will obscure the override settings\n  localStorage.clear();\n\n  // WebAPI\n  configLocal.api = {\n    name: \"OHDSI\",\n    url: \"$OHDSI_WEBAPI_URL\",\n  };\n\n  configLocal.cohortComparisonResultsEnabled = false;\n  configLocal.userAuthenticationEnabled = true;\n  configLocal.plpResultsEnabled = false;\n\n  configLocal.authProviders = [\n    {\n      name: \"Local Security Test DB\",\n      url: \"user/login/db\",\n      ajax: true,\n      icon: \"fa fa-database\",\n      isUseCredentialsForm: true,\n    },\n  ];\n\n  return configLocal;\n});\n",
            "dockerRegistryServer": "https://index.docker.io/v1",
            "dockerImageName": "ohdsi/atlas",
            "dockerImageTag": "2.13.0",
            "shareName": "atlas",
            "mountPath": "/etc/atlas",
            "logCategories": [
              "AppServiceAppLogs",
              "AppServiceConsoleLogs",
              "AppServiceHTTPLogs"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}/{2}', format('stohdsi{0}', parameters('suffix')), 'default', variables('shareName'))]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', format('stohdsi{0}', parameters('suffix')), 'default')]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2021-04-01",
              "name": "[format('{0}/{1}', format('stohdsi{0}', parameters('suffix')), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('stohdsi{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[format('stohdsi{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              }
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "deployment-ohdsi-atlas-config-file",
              "location": "[parameters('location')]",
              "kind": "AzureCLI",
              "properties": {
                "azCliVersion": "2.42.0",
                "timeout": "PT5M",
                "retentionInterval": "PT1H",
                "environmentVariables": [
                  {
                    "name": "AZURE_STORAGE_ACCOUNT",
                    "value": "[format('stohdsi{0}', parameters('suffix'))]"
                  },
                  {
                    "name": "AZURE_STORAGE_KEY",
                    "secureValue": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', format('stohdsi{0}', parameters('suffix'))), '2021-04-01').keys[0].value]"
                  },
                  {
                    "name": "OHDSI_WEBAPI_URL",
                    "value": "[parameters('ohdsiWebApiUrl')]"
                  },
                  {
                    "name": "CONTENT",
                    "value": "[variables('$fxv#0')]"
                  },
                  {
                    "name": "SHARE_NAME",
                    "value": "[variables('shareName')]"
                  }
                ],
                "scriptContent": "    apk --update add gettext\n    echo \"$CONTENT\" > config-local-temp.js\n    envsubst < config-local-temp.js > config-local.js\n    az storage file upload --source config-local.js -s $SHARE_NAME\n    "
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('stohdsi{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[format('app-ohdsiatlas-{0}', parameters('suffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "httpsOnly": true,
                "clientAffinityEnabled": false,
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "azureStorageAccounts": {
                    "[format('{0}', variables('shareName'))]": {
                      "type": "AzureFiles",
                      "shareName": "[variables('shareName')]",
                      "mountPath": "[variables('mountPath')]",
                      "accountName": "[format('stohdsi{0}', parameters('suffix'))]",
                      "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', format('stohdsi{0}', parameters('suffix'))), '2021-04-01').keys[0].value]"
                    }
                  },
                  "linuxFxVersion": "[format('DOCKER|{0}:{1}', variables('dockerImageName'), variables('dockerImageTag'))]",
                  "ftpsState": "Disabled",
                  "appSettings": [
                    {
                      "name": "DOCKER_REGISTRY_SERVER_URL",
                      "value": "[variables('dockerRegistryServer')]"
                    },
                    {
                      "name": "WEBSITE_HEALTHCHECK_MAXPINGFAILURES",
                      "value": "10"
                    },
                    {
                      "name": "WEBAPI_URL",
                      "value": "[parameters('ohdsiWebApiUrl')]"
                    },
                    {
                      "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
                      "value": "30"
                    },
                    {
                      "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
                      "value": "false"
                    },
                    {
                      "name": "WEBSITES_PORT",
                      "value": "8080"
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', 'deployment-ohdsi-atlas-config-file')]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('stohdsi{0}', parameters('suffix')))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', format('app-ohdsiatlas-{0}', parameters('suffix')))]",
              "name": "[format('app-ohdsiatlas-{0}', parameters('suffix'))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(variables('logCategories'))]",
                    "input": {
                      "category": "[variables('logCategories')[copyIndex('logs')]]",
                      "enabled": true,
                      "retentionPolicy": {
                        "days": 30,
                        "enabled": true
                      }
                    }
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', format('app-ohdsiatlas-{0}', parameters('suffix')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', format('asp-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', format('log-{0}', parameters('suffix')))]",
        "[resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp')]"
      ],
      "metadata": {
        "description": "Creates the ohdsi atlas UI"
      }
    }
  ],
  "outputs": {
    "ohdsiWebapiUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'ohdsiWebApiWebapp'), '2022-09-01').outputs.ohdsiWebapiUrl.value]"
    }
  }
}