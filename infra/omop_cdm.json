{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.2.56959",
      "templateHash": "136980069299826155"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location for all resources."
      }
    },
    "postgresAtlasDatabaseName": {
      "type": "string",
      "metadata": {
        "description": "The name of webapi CDM database"
      }
    },
    "postgresServerName": {
      "type": "string",
      "metadata": {
        "description": "The name of the postgres server"
      }
    },
    "cdmContainerUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL of the container where the CDM data is stored"
      }
    },
    "cdmSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The SAS token to access the CDM data"
      }
    },
    "postgresOMOPCDMDatabaseName": {
      "type": "string",
      "metadata": {
        "description": "The name of the OMOP CDM database"
      }
    },
    "postgresAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for the postgres server"
      }
    },
    "postgresWebapiAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for the webapi database"
      }
    },
    "postgresOMOPCDMpassword": {
      "type": "securestring",
      "metadata": {
        "description": "Password for the cdm user"
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the keyvault"
      }
    }
  },
  "variables": {
    "$fxv#0": "CREATE ROLE ${POSTGRES_OMOP_CDM_ROLE} VALID UNTIL 'infinity';\nCOMMENT ON ROLE ${POSTGRES_OMOP_CDM_ROLE} IS 'Application group for OHDSI OMOP CDM'; \nCREATE ROLE ${POSTGRES_CDM_USERNAME} LOGIN ENCRYPTED PASSWORD ${CDM_MD5} VALID UNTIL 'infinity'; \nGRANT ${POSTGRES_OMOP_CDM_ROLE} TO ${POSTGRES_CDM_USERNAME};\nCOMMENT ON ROLE ${POSTGRES_CDM_USERNAME} IS 'Application user account for OHDSI OMOP CDM'; \nGRANT CONNECT, TEMPORARY ON DATABASE ${OMOP_CDM_DATABASE_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE};\n\nCREATE SCHEMA IF NOT EXISTS ${POSTGRES_OMOP_CDM_SCHEMA_NAME} AUTHORIZATION ${POSTGRES_ADMIN_USERNAME}; \n\nCOMMENT ON SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} IS 'Schema containing tables of the OMOP CDM'; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} TO PUBLIC; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT SELECT ON TABLES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT SELECT, USAGE ON SEQUENCES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_CDM_SCHEMA_NAME} GRANT USAGE ON TYPES TO ${POSTGRES_OMOP_CDM_ROLE};\n\nCREATE SCHEMA IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} AUTHORIZATION ${POSTGRES_ADMIN_USERNAME}; \nCOMMENT ON SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} IS 'Schema containing tables of the OMOP Results'; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} TO PUBLIC; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT INSERT, SELECT, UPDATE, DELETE, REFERENCES, TRIGGER ON TABLES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT SELECT, USAGE ON SEQUENCES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME} GRANT USAGE ON TYPES TO ${POSTGRES_OMOP_CDM_ROLE};\n\nCREATE SCHEMA IF NOT EXISTS ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} AUTHORIZATION ${POSTGRES_ADMIN_USERNAME}; \nCOMMENT ON SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} IS 'Schema containing tables of the OMOP Temporary'; \nGRANT USAGE ON SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} TO PUBLIC; \nGRANT ALL ON SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} TO GROUP ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT INSERT, SELECT, UPDATE, DELETE, REFERENCES, TRIGGER ON TABLES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT SELECT, USAGE ON SEQUENCES TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT EXECUTE ON FUNCTIONS TO ${POSTGRES_OMOP_CDM_ROLE}; \nALTER DEFAULT PRIVILEGES IN SCHEMA ${POSTGRES_OMOP_TEMP_SCHEMA_NAME} GRANT USAGE ON TYPES TO ${POSTGRES_OMOP_CDM_ROLE};\n",
    "$fxv#1": "CREATE TABLE IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_analysis\n(\n    analysis_id integer,\n    analysis_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_1_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_2_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_3_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_4_name character varying(255) COLLATE pg_catalog.\"default\",\n    stratum_5_name character varying(255) COLLATE pg_catalog.\"default\",\n    is_default integer,\n    category character varying(255) COLLATE pg_catalog.\"default\"\n)\nWITH (\n    OIDS = FALSE\n)\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_analysis\n    OWNER to ${POSTGRES_ADMIN_USERNAME};\n\n\nCREATE TABLE IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results\n(\n    analysis_id integer,\n    stratum_1 character varying COLLATE pg_catalog.\"default\",\n    stratum_2 character varying COLLATE pg_catalog.\"default\",\n    stratum_3 character varying COLLATE pg_catalog.\"default\",\n    stratum_4 character varying COLLATE pg_catalog.\"default\",\n    stratum_5 character varying COLLATE pg_catalog.\"default\",\n    count_value bigint\n)\nWITH (\n    OIDS = FALSE\n)\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results\n    OWNER to ${POSTGRES_ADMIN_USERNAME};\n-- Index: idx_ar_aid\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_aid;\n\nCREATE INDEX IF NOT EXISTS idx_ar_aid\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (analysis_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_aid_s1\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_aid_s1;\n\nCREATE INDEX IF NOT EXISTS idx_ar_aid_s1\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (analysis_id ASC NULLS LAST, stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_aid_s1234\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_aid_s1234;\n\nCREATE INDEX IF NOT EXISTS idx_ar_aid_s1234\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (analysis_id ASC NULLS LAST, stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST, stratum_2 COLLATE pg_catalog.\"default\" ASC NULLS LAST, stratum_3 COLLATE pg_catalog.\"default\" ASC NULLS LAST, stratum_4 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_s1\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_s1;\n\nCREATE INDEX IF NOT EXISTS idx_ar_s1\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ar_s2\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ar_s2;\n\nCREATE INDEX IF NOT EXISTS idx_ar_s2\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results USING btree\n    (stratum_2 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n\n\n-- Table: ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist\n\n-- DROP TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist;\n\nCREATE TABLE IF NOT EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist\n(\n    analysis_id integer,\n    stratum_1 character varying COLLATE pg_catalog.\"default\",\n    stratum_2 character varying COLLATE pg_catalog.\"default\",\n    stratum_3 character varying COLLATE pg_catalog.\"default\",\n    stratum_4 character varying COLLATE pg_catalog.\"default\",\n    stratum_5 character varying COLLATE pg_catalog.\"default\",\n    count_value bigint,\n    min_value numeric,\n    max_value numeric,\n    avg_value numeric,\n    stdev_value numeric,\n    median_value numeric,\n    p10_value numeric,\n    p25_value numeric,\n    p75_value numeric,\n    p90_value numeric\n)\nWITH (\n    OIDS = FALSE\n)\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist\n    OWNER to ${POSTGRES_ADMIN_USERNAME};\n-- Index: idx_ard_aid\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ard_aid;\n\nCREATE INDEX IF NOT EXISTS idx_ard_aid\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist USING btree\n    (analysis_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ard_s1\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ard_s1;\n\nCREATE INDEX IF NOT EXISTS idx_ard_s1\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist USING btree\n    (stratum_1 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;\n-- Index: idx_ard_s2\n\n-- DROP INDEX IF EXISTS ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.idx_ard_s2;\n\nCREATE INDEX IF NOT EXISTS idx_ard_s2\n    ON ${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}.achilles_results_dist USING btree\n    (stratum_2 COLLATE pg_catalog.\"default\" ASC NULLS LAST)\n    TABLESPACE pg_default;",
    "$fxv#2": "INSERT INTO ${WEBAPI_SCHEMA_NAME}.source (source_id, source_name, source_key, source_connection, source_dialect, is_cache_enabled) \nSELECT nextval('${WEBAPI_SCHEMA_NAME}.source_sequence'), '${OMOP_CDM_DATABASE_NAME}', '${OMOP_CDM_DATABASE_NAME}', '${OMOP_JDBC_CONNECTION_STRING}', 'postgresql', true;\n\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.source_daimon (source_daimon_id, source_id, daimon_type, table_qualifier, priority) \nSELECT nextval('${WEBAPI_SCHEMA_NAME}.source_daimon_sequence'), source_id, 0, '${POSTGRES_OMOP_CDM_SCHEMA_NAME}', 0\nFROM ${WEBAPI_SCHEMA_NAME}.source\nWHERE source_key = '${OMOP_CDM_DATABASE_NAME}';\n\n-- Vocabulary tables are in the same schema as the CDM tables\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.source_daimon (source_daimon_id, source_id, daimon_type, table_qualifier, priority) \nSELECT nextval('${WEBAPI_SCHEMA_NAME}.source_daimon_sequence'), source_id, 1, '${POSTGRES_OMOP_CDM_SCHEMA_NAME}', 1\nFROM ${WEBAPI_SCHEMA_NAME}.source\nWHERE source_key = '${OMOP_CDM_DATABASE_NAME}';\n\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.source_daimon (source_daimon_id, source_id, daimon_type, table_qualifier, priority) \nSELECT nextval('${WEBAPI_SCHEMA_NAME}.source_daimon_sequence'), source_id, 2, '${POSTGRES_OMOP_RESULTS_SCHEMA_NAME}', 1\nFROM ${WEBAPI_SCHEMA_NAME}.source\nWHERE source_key = '${OMOP_CDM_DATABASE_NAME}';\n\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.source_daimon (source_daimon_id, source_id, daimon_type, table_qualifier, priority) \nSELECT nextval('${WEBAPI_SCHEMA_NAME}.source_daimon_sequence'), source_id, 5, '${POSTGRES_OMOP_TEMP_SCHEMA_NAME}', 0\nFROM ${WEBAPI_SCHEMA_NAME}.source\nWHERE source_key = '${OMOP_CDM_DATABASE_NAME}';\n\n-- todo: add source user role\n\n-- Add permissions for the OMOP CDM source\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortdefinition:*:generate:${OMOP_CDM_DATABASE_NAME}:get', 'Generate Cohort on Source with SourceKey = ${OMOP_CDM_DATABASE_NAME}');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortdefinition:*:report:${OMOP_CDM_DATABASE_NAME}:get',\t'Get Inclusion Rule Report for Source with SourceKey = ${OMOP_CDM_DATABASE_NAME}');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('source:${OMOP_CDM_DATABASE_NAME}:access','Access to Source with SourceKey = ${OMOP_CDM_DATABASE_NAME}');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:included-concepts:count:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:resolveConceptSetExpression:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:lookup:identifiers:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:lookup:identifiers:ancestors:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:lookup:mapped:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:compare:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:optimize:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cdmresults:${OMOP_CDM_DATABASE_NAME}:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cdmresults:${OMOP_CDM_DATABASE_NAME}:*:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cdmresults:${OMOP_CDM_DATABASE_NAME}:conceptRecordCount:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortresults:${OMOP_CDM_DATABASE_NAME}:*:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortresults:${OMOP_CDM_DATABASE_NAME}:*:*:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:concept:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:concept:*:related:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortdefinition:*:cancel:${OMOP_CDM_DATABASE_NAME}:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:search:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('ir:*:execute:${OMOP_CDM_DATABASE_NAME}:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('ir:*:execute:${OMOP_CDM_DATABASE_NAME}:delete', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('${OMOP_CDM_DATABASE_NAME}:person:*:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:lookup:sourcecodes:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohort-characterization:*:generation:${OMOP_CDM_DATABASE_NAME}:post', '');\t\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohort-characterization:*:generation:${OMOP_CDM_DATABASE_NAME}:delete', '');\t\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('pathway-analysis:*:generation:${OMOP_CDM_DATABASE_NAME}:post', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('pathway-analysis:*:generation:${OMOP_CDM_DATABASE_NAME}:delete', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('ir:*:report:${OMOP_CDM_DATABASE_NAME}:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('ir:*:info:${OMOP_CDM_DATABASE_NAME}:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:search:*:get', '');\t\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortresults:${OMOP_CDM_DATABASE_NAME}:*:healthcareutilization:*:*:get',\t'Get cohort results baseline on period for Source with SourceKey = ${OMOP_CDM_DATABASE_NAME}');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('cohortresults:${OMOP_CDM_DATABASE_NAME}:*:healthcareutilization:*:*:*:get', 'Get cohort results baseline on occurrence for Source with SourceKey = ${OMOP_CDM_DATABASE_NAME}');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('ir:${OMOP_CDM_DATABASE_NAME}:info:*:delete', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:concept:*:ancestorAndDescendant:get', '');\nINSERT INTO ${WEBAPI_SCHEMA_NAME}.sec_permission (value, description)\n     VALUES ('vocabulary:${OMOP_CDM_DATABASE_NAME}:lookup:recommended:post', '');\n\n-- todo: assign permissions to source role",
    "$fxv#3": "#!/bin/bash\nset -o errexit\nset -o pipefail\nset -o nounset\n\nLOG_FILE=${AZ_SCRIPTS_PATH_OUTPUT_DIRECTORY}/all.log\n\nexec >  >(tee -ia ${LOG_FILE})\nexec 2> >(tee -ia ${LOG_FILE} >&2)\n\n# install postgresql client\necho 'installing psql...'\napk --update add postgresql-client gettext\n\n# create OMOP CDM schema and user\npg_cdm_password=\"${POSTGRES_OMOP_CDM_PASSWORD}${POSTGRES_CDM_USERNAME}\"\nexport CDM_MD5=\"'md5$(echo -n $pg_cdm_password | md5sum | awk '{ print $1 }')'\"\n\nprintf 'Creating omp cdm schemas and user\\n'\necho \"$SQL_create_omop_schemas\" | envsubst | psql \"$OMOP_CONNECTION_STRING\" -e\n\n# create OMOP CDM (+ Vocabulary) tables\nprintf 'Creating OMOP CDM tables\\n'\nsed -i  s/@cdmDatabaseSchema/${POSTGRES_OMOP_CDM_SCHEMA_NAME}/g OMOPCDM_postgresql_5.4_ddl.sql OMOPCDM_postgresql_5.4_constraints.sql OMOPCDM_postgresql_5.4_primary_keys.sql OMOPCDM_postgresql_5.4_indices.sql\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOPCDM_postgresql_5.4_ddl.sql -v ON_ERROR_STOP=1\n\n# create and load OMOP Results (Achilles) tables\nprintf 'Creating OMOP Results tables\\n'\necho \"$SQL_create_achilles_schema\" | envsubst | psql \"$OMOP_CONNECTION_STRING\" -e -v ON_ERROR_STOP=1\n\n# skip foreign key constraints for now due to open bug - https://github.com/OHDSI/CommonDataModel/issues/452\n# psql \"$OMOP_CONNECTION_STRING\" -f OMOPCDM_postgresql_5.4_constraints.sql\n\n# create OMOP CDM primary keys\nprintf 'Creating OMOP CDM primary keys\\n'\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOPCDM_postgresql_5.4_primary_keys.sql -v ON_ERROR_STOP=1\n\n# load OMOP CDM data\ntables=(\"cdm.concept_ancestor\" \"cdm.concept_relationship\" \"cdm.concept\" \"cdm.drug_strength\" \"cdm.concept_synonym\" \"cdm.measurement\" \"cdm.observation\" \"cdm.cost\" \"cdm.visit_detail\" \"cdm.visit_occurrence\" \"cdm.payer_plan_period\" \"cdm.drug_exposure\" \"cdm.procedure_occurrence\" \"cdm.condition_occurrence\" \"cdm.condition_era\" \"cdm.provider\" \"cdm.drug_era\" \"cdm.person\" \"cdm.relationship\" \"cdm.observation_period\" \"cdm.concept_class\" \"cdm.device_exposure\" \"cdm.death\" \"cdm.cdm_source\" \"cdm.vocabulary\" \"cdm.domain\" \"cdm_results.achilles_analysis\" \"cdm_results.achilles_results_dist\" \"cdm_results.achilles_results\")\nprintf 'Loading OMOP CDM data\\n'\nn=${#tables[@]}\ni=0\nfor element in \"${tables[@]}\"; do\n    ((i++)) || true\n    printf \"Downloading and extracting: %s (%s)\\n\" \"$element.csv.gz\" \"$i/$n\"\n    file=/tmp/\"$element\".csv\n    curl \"${OMOP_CDM_CONTAINER_URL}$element.csv.gz${OMOP_CDM_SAS_TOKEN}\" | gunzip > \"$file\"\n    num_of_records=$(wc -l \"$file\" | awk '{print $1}')\n    printf \"Copying %s records to table: %s\\n\" \"$num_of_records\" \"$element\"\n    psql \"$OMOP_CONNECTION_STRING\" -c \"\\COPY $element FROM '$file' WITH CSV;\" -v ON_ERROR_STOP=1\n    rm -f \"$file\"\n    printf \"done\\n\"\ndone\n\n# create OMOP CDM indices\nprintf 'creating OMOP CDM indices\\n'\npsql \"$OMOP_CONNECTION_STRING\" -e -f OMOPCDM_postgresql_5.4_indices.sql -v ON_ERROR_STOP=1\n\n# for now user will need to add a source via Atlas UI, there's work in progress to automate this\nprintf 'OMOP CDM created, you can now add it to Atlas as a source, connection string will avaiable in Azure KeyVault.\\n'\n\n# add OMOP CDM source to WebAPI\n# printf 'adding OMOP CDM source to WebAPI\\n'\n# echo \"$SQL_add_omop_source\" | envsubst | psql \"$ATLAS_DB_CONNECTION_STRING\" -e -v ON_ERROR_STOP=1\n",
    "postgresOMOPCDMSchemaName": "cdm",
    "postgresOMOPResultsSchemaName": "cdm_results",
    "postgresOMOPTempSchemaName": "temp",
    "postgresOMOPCDMRole": "cdm_reader",
    "postgresOMOPCDMUsername": "cdm_user",
    "postgresOMOPCDMUserSecretName": "[format('{0}-cdm-user-password', parameters('postgresOMOPCDMDatabaseName'))]",
    "postgresOMOPCDMJDBCConnectionStringSecretName": "[format('{0}-cdm-jdbc-connection-string', parameters('postgresOMOPCDMDatabaseName'))]",
    "postgresWebAPISchemaName": "webapi",
    "postgresWebapiAdminUsername": "ohdsi_admin_user",
    "postgresAdminUsername": "postgres_admin"
  },
  "resources": [
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('postgresOMOPCDMUserSecretName'))]",
      "properties": {
        "value": "[parameters('postgresOMOPCDMpassword')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2022-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), variables('postgresOMOPCDMJDBCConnectionStringSecretName'))]",
      "properties": {
        "value": "[format('jdbc:postgresql://{0}:5432/{1}?user={2}&password={3}&sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresOMOPCDMDatabaseName'), variables('postgresOMOPCDMUsername'), parameters('postgresOMOPCDMpassword'))]"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2022-12-01",
      "name": "[format('{0}/{1}', parameters('postgresServerName'), parameters('postgresOMOPCDMDatabaseName'))]",
      "properties": {
        "charset": "utf8",
        "collation": "en_US.utf8"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "deployment-omop-cdm",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.42.0",
        "timeout": "PT60M",
        "forceUpdateTag": "1",
        "environmentVariables": [
          {
            "name": "WEBAPI_SCHEMA_NAME",
            "value": "[variables('postgresWebAPISchemaName')]"
          },
          {
            "name": "ATLAS_DB_CONNECTION_STRING",
            "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresAtlasDatabaseName'), variables('postgresWebapiAdminUsername'), parameters('postgresWebapiAdminPassword'))]"
          },
          {
            "name": "OMOP_CONNECTION_STRING",
            "secureValue": "[format('host={0} port=5432 dbname={1} user={2} password={3} sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresOMOPCDMDatabaseName'), variables('postgresAdminUsername'), parameters('postgresAdminPassword'))]"
          },
          {
            "name": "OMOP_JDBC_CONNECTION_STRING",
            "secureValue": "[format('jdbc:postgresql://{0}:5432/{1}?user={2}&password={3}&sslmode=require', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('postgresServerName')), '2022-12-01').fullyQualifiedDomainName, parameters('postgresOMOPCDMDatabaseName'), variables('postgresOMOPCDMUsername'), parameters('postgresOMOPCDMpassword'))]"
          },
          {
            "name": "OMOP_CDM_DATABASE_NAME",
            "value": "[parameters('postgresOMOPCDMDatabaseName')]"
          },
          {
            "name": "OMOP_CDM_CONTAINER_URL",
            "value": "[parameters('cdmContainerUrl')]"
          },
          {
            "name": "POSTGRES_ADMIN_USERNAME",
            "value": "[variables('postgresAdminUsername')]"
          },
          {
            "name": "POSTGRES_CDM_USERNAME",
            "value": "[variables('postgresOMOPCDMUsername')]"
          },
          {
            "name": "POSTGRES_OMOP_CDM_ROLE",
            "value": "[variables('postgresOMOPCDMRole')]"
          },
          {
            "name": "POSTGRES_OMOP_CDM_PASSWORD",
            "secureValue": "[parameters('postgresOMOPCDMpassword')]"
          },
          {
            "name": "OMOP_CDM_SAS_TOKEN",
            "value": "[parameters('cdmSasToken')]"
          },
          {
            "name": "POSTGRES_OMOP_CDM_SCHEMA_NAME",
            "value": "[variables('postgresOMOPCDMSchemaName')]"
          },
          {
            "name": "POSTGRES_OMOP_RESULTS_SCHEMA_NAME",
            "value": "[variables('postgresOMOPResultsSchemaName')]"
          },
          {
            "name": "POSTGRES_OMOP_TEMP_SCHEMA_NAME",
            "value": "[variables('postgresOMOPTempSchemaName')]"
          },
          {
            "name": "SQL_create_omop_schemas",
            "value": "[variables('$fxv#0')]"
          },
          {
            "name": "SQL_create_achilles_schema",
            "value": "[variables('$fxv#1')]"
          },
          {
            "name": "SQL_add_omop_source",
            "value": "[variables('$fxv#2')]"
          }
        ],
        "scriptContent": "[variables('$fxv#3')]",
        "supportingScriptUris": [
          "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_ddl.sql",
          "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_constraints.sql",
          "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_primary_keys.sql",
          "https://raw.githubusercontent.com/OHDSI/CommonDataModel/main/inst/ddl/5.4/postgresql/OMOPCDM_postgresql_5.4_indices.sql"
        ],
        "cleanupPreference": "OnExpiration",
        "retentionInterval": "PT1H",
        "containerSettings": {
          "containerGroupName": "deployment-omop-cdm"
        }
      }
    }
  ]
}